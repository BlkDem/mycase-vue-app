/**
 * Generated by Verge3D Puzzles v.3.8.1
 * Tue Mar 29 2022 20:07:22 GMT+0700 (GMT+07:00)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";



    var PROC = {

};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('display', 'none', 'id_bottom_panel', false);
    setHTMLElemStyle('display', 'block', 'preloader', false);
    setHTMLElemStyle('width', '0', 'preloader_bar', false);
  });
})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'preloader_bar', false);
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'id_caption', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('display', 'none', 'preloader', false);
    setHTMLElemStyle('display', 'block', 'id_bottom_panel', false);
    setHTMLElemAttribute('className', 'left-panel show', 'paLeft', false);
    setHTMLElemAttribute('className', 'bottom-panel  show', 'id_bottom_panel', false);
    var VARS = Object.defineProperties({}, {

});

    Function('app', 'v3d', 'VARS', 'PROC', (('HideCr();' + '\n' +
    'SceneLoaded();')))(appInstance, v3d, VARS, PROC);

  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["set_tiar_link"] = set_tiar_link;
this.procedures["set_link"] = set_link;
this.procedures["show_sides"] = show_sides;
this.procedures["process_style"] = process_style;
this.procedures["hide_all"] = hide_all;
this.procedures["showcontrols"] = showcontrols;
this.procedures["hidecontrols"] = hidecontrols;
this.procedures["load_umbrella"] = load_umbrella;
this.procedures["setstyle"] = setstyle;
this.procedures["load_gamma"] = load_gamma;
this.procedures["load_diamond"] = load_diamond;
this.procedures["load_diamondplus"] = load_diamondplus;
this.procedures["hidesidepanels"] = hidesidepanels;
this.procedures["startPreloader"] = startPreloader;
this.procedures["updatePreloader"] = updatePreloader;
this.procedures["endPreloader"] = endPreloader;

var PROC = {
    "set_tiar_link": set_tiar_link,
    "set_link": set_link,
    "show_sides": show_sides,
    "process_style": process_style,
    "hide_all": hide_all,
    "showcontrols": showcontrols,
    "hidecontrols": hidecontrols,
    "load_umbrella": load_umbrella,
    "setstyle": setstyle,
    "load_gamma": load_gamma,
    "load_diamond": load_diamond,
    "load_diamondplus": load_diamondplus,
    "hidesidepanels": hidesidepanels,
    "startPreloader": startPreloader,
    "updatePreloader": updatePreloader,
    "endPreloader": endPreloader,
};

var rotation, current_style, case_current, paneldesign, percentage, light, front_visible;


// brightnessContrast puzzle
function brightnessContrast(brightness, contrast) {
    appInstance.enablePostprocessing([{
        type: 'brightnessContrast',
        brightness: brightness,
        contrast: contrast
    }]);
}



// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}



// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}


// Describe this function...
function set_tiar_link() {
  if (case_current == 'case_gamma') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pJxqACx', 'id_link', false);
  }
  if (case_current == 'case_umbrella') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pzSA7wL', 'id_link', false);
  }
}


// getUrlData puzzle
function getUrlData(kind, isParent) {

    var targetWindow = isParent ? window.parent : window;
    switch (kind) {
    case 'URL':
        return targetWindow.location.href;
    case 'PARAMS':
        return v3d.AppUtils.getPageParams(targetWindow);
    case 'HOSTNAME':
        return targetWindow.location.hostname;
    default:
        console.error('getUrlData: option does not exists.');
        return '';
    }

}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function set_link() {
  if (case_current == 'case_diamondplus') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pIJXYb1', 'id_link', false);
  }
  if (case_current == 'case_diamond') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_2aTYNZ1', 'id_link', false);
  }
  if (case_current == 'case_gamma') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pziKLcR', 'id_link', false);
  }
  if (case_current == 'case_umbrella') {
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pvhEePt', 'id_link', false);
  }
}


// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}


// Describe this function...
function show_sides() {
  changeVis(['GROUP', 'side-lights'], true);
  changeVis(['GROUP', 'side-lights-case'], true);
}


// setLightParam puzzle
function setLightParam(type, objSelector, param) {

    var objNames = retrieveObjectNames(objSelector);

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj || !obj.isLight)
            return;

        switch (type) {
        case 'COLOR_VECTOR':
            obj.color.r = param[0];
            obj.color.g = param[1];
            obj.color.b = param[2];
            break;
        case 'COLOR_CSS_HEX':
        case 'COLOR_CSS_RGB':
            var color = _pGlob.colorTmp.set(param);
            color.convertSRGBToLinear();
            obj.color.r = color.r;
            obj.color.g = color.g;
            obj.color.b = color.b;
            break;
        case 'INTENSITY':
            if (obj.userData.usePowerUnits)
                obj.power = param;
            else
                obj.intensity = param;
            break;
        }

    });

}



// isObjectVisible puzzle
function isObjectVisible(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}


// Describe this function...
function process_style() {
  if (current_style == 'style_umbrella') {
    changeVis('umbrella', true);
    changeVis('frontround', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_ufo') {
    changeVis('frontround', true);
    changeVis(['GROUP', 'ufo'], true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_transf') {
    changeVis('frontround', true);
    changeVis(['GROUP', 'transf'], true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_predator') {
    changeVis('frontround', true);
    changeVis('predator', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_controller') {
    changeVis(['GROUP', 'bigoled'], true);
    changeVis('crossoutside', true);
    show_sides();
  }
  if (current_style == 'style_rose') {
    changeVis('frontround', true);
    changeVis('rose', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_bio') {
    changeVis('frontround', true);
    changeVis('bio', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_my2') {
    changeVis('frontround', true);
    changeVis('my2', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
  if (current_style == 'style_radio') {
    changeVis('frontround', true);
    changeVis('radio', true);
    changeVis(['GROUP', 'button'], true);
    show_sides();
  }
}

// Describe this function...
function hide_all() {
  changeVis(['GROUP', 'bigoled'], false);
  changeVis(['GROUP', 'transf'], false);
  changeVis(['GROUP', 'ufo'], false);
  changeVis(['GROUP', 'front'], false);
  changeVis(['GROUP', 'button'], false);
  changeVis('crossoutside', false);
  changeVis('frontround', false);
  changeVis(['GROUP', 'side-lights'], false);
  changeVis(['GROUP', 'side-lights-case'], false);
}

// Describe this function...
function showcontrols() {
  setHTMLElemAttribute('className', 'left-panel show', 'paLeft', false);
  setHTMLElemAttribute('className', 'bottom-panel  show', 'id_bottom_panel', false);
}

// Describe this function...
function hidecontrols() {
  setHTMLElemAttribute('className', 'left-panel hide', 'paLeft', false);
  setHTMLElemAttribute('className', 'bottom-panel hide', 'id_bottom_panel', false);
}

// Describe this function...
function load_umbrella() {
  case_current = 'case_umbrella';
  setHTMLElemAttribute('src', './assets/images/u1_200.png', 'case_current', false);
  setHTMLElemAttribute('src', './assets/images/red120.png', 'color_current', false);
  setHTMLElemAttribute('className', 'show', 'id_clear', false);
  setHTMLElemAttribute('className', 'btn-group dropright show', 'cooler_color_current', false);
  setHTMLElemAttribute('innerHTML', 'Umbrella', 'id_caption', false);
  light = 0;
  setstyle();
}

// Describe this function...
function setstyle() {
  setHTMLElemAttribute('className', 'btn-group dropright hide', 'id_style', false);
  if (case_current == 'case_diamondplus') {
    setHTMLElemAttribute('innerHTML', 'Diamond+', 'id_caption', false);
    setHTMLElemAttribute('innerHTML', '111,11$', 'id_cost', false);
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pIJXYb1', 'id_link', false);
    changeVis(['GROUP', 'coolers'], true);
  }
  if (case_current == 'case_gamma') {
    changeVis(['GROUP', 'coolers'], true);
    changeVis('front_panel', true);
    changeVis('clear_panel', true);
    setHTMLElemAttribute('className', 'btn-group dropright show', 'id_style', false);
    setHTMLElemAttribute('innerHTML', '139,99$', 'id_cost', false);
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pziKLcR', 'id_link', false);
  }
  if (case_current == 'case_diamond') {
    changeVis(['GROUP', 'coolers'], false);
    setHTMLElemAttribute('innerHTML', 'Diamond', 'id_caption', false);
    setHTMLElemAttribute('innerHTML', '79,99$', 'id_cost', false);
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_2aTYNZ1', 'id_link', false);
  }
  if (case_current == 'case_umbrella') {
    setHTMLElemAttribute('innerHTML', 'Umbrella', 'id_caption', false);
    setHTMLElemAttribute('innerHTML', '169,99$', 'id_cost', false);
    setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pvhEePt', 'id_link', false);
  }
}

// Describe this function...
function load_gamma() {
  case_current = 'case_gamma';
  setHTMLElemAttribute('src', './assets/images/g1_200.png', 'case_current', false);
  setHTMLElemAttribute('src', './assets/images/green120.png', 'color_current', false);
  setHTMLElemAttribute('className', 'show', 'id_clear', false);
  setHTMLElemAttribute('className', 'btn-group dropright show', 'cooler_color_current', false);
  setHTMLElemAttribute('innerHTML', 'Gamma', 'id_caption', false);
  light = 0;
  setstyle();
}


// isSceneLoaded puzzle
function isSceneLoaded(url) {
    if (appInstance.scene) {
        var scene = url === '' ? appInstance.scene : appInstance.scene.getObjectByName(url);
        if (scene)
            return true;
        else
            return false;
    } else {
        return false;
    }
}



// loadScene puzzle
function loadScene(url, sceneName, loadCb, progCb, errorCb) {

    appInstance.unload();

    // clean object cache
    _pGlob.objCache = {};

    _pGlob.percentage = 0;
    appInstance.loadScene(url, function(loadedScene) {
        appInstance.enableControls();
        loadedScene.name = sceneName;

        _pGlob.percentage = 100;
        loadCb();
    }, function(percentage) {
        _pGlob.percentage = percentage;
        progCb();
    }, errorCb);
}


// Describe this function...
function load_diamond() {
  hidesidepanels();
  case_current = 'case_diamond';
  setHTMLElemAttribute('src', './assets/images/green120.png', 'color_current', false);
  setHTMLElemAttribute('src', './assets/images/d_200.png', 'case_current', false);
  setHTMLElemAttribute('className', 'hide', 'id_clear', false);
  setHTMLElemAttribute('className', 'btn-group dropright hide', 'cooler_color_current', false);
  setHTMLElemAttribute('innerHTML', 'Diamond', 'id_caption', false);
  light = 0;
  setstyle();
}

// Describe this function...
function load_diamondplus() {
  hidesidepanels();
  setHTMLElemAttribute('src', './assets/images/dp_200.png', 'case_current', false);
  setHTMLElemAttribute('className', 'hide', 'id_clear', false);
  setHTMLElemAttribute('className', 'btn-group dropright show', 'cooler_color_current', false);
  setHTMLElemAttribute('src', './assets/images/green120.png', 'color_current', false);
  setHTMLElemAttribute('innerHTML', 'Diamond+', 'id_caption', false);
  case_current = 'case_diamondplus';
  setstyle();
  light = 0;
}

// Describe this function...
function hidesidepanels() {
  changeVis('clear_panel', false);
  changeVis('style_one', false);
  changeVis('style_transf', false);
  changeVis('style_predator', false);
  changeVis('style_two', false);
  changeVis('front_panel', false);
}


// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function startPreloader() {
  registerSetTimeout(0.1, function() {
    hidecontrols();
    setHTMLElemStyle('display', 'none', 'id_bottom_panel', false);
    setHTMLElemStyle('display', 'block', 'preloader', false);
    setHTMLElemStyle('width', '0', 'preloader_bar', false);
  });
}

// Describe this function...
function updatePreloader(percentage) {
  setHTMLElemStyle('width', String(Math.round(_pGlob.percentage)) + '%', 'preloader_bar', false);
  setHTMLElemAttribute('innerHTML', String(Math.round(_pGlob.percentage)) + '%', 'id_caption', false);
}

// Describe this function...
function endPreloader() {
  registerSetTimeout(0.1, function() {
    setHTMLElemStyle('display', 'none', 'preloader', false);
    setHTMLElemStyle('display', 'block', 'id_bottom_panel', false);
    showcontrols();
  });
}


rotation = true;
light = 0;
brightnessContrast(0, 1);
registerSetTimer('myTimer', 10, function() {
  autoRotateCamera(true, 2);
}, 1);

registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  autoRotateCamera(false, 2);
  rotation = false;
}, function() {});

console.log(dictGet(getUrlData('PARAMS', false), 'id'));

eventHTMLElem('click', 'color_orange', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_orange');
  setHTMLElemAttribute('src', './assets/images/white120.png', 'color_current', false);
  assignMat('frontround', 'Chrome');
  set_link();
});
eventHTMLElem('click', 'color_green', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_green');
  setHTMLElemAttribute('src', './assets/images/green120.png', 'color_current', false);
  set_link();
});
eventHTMLElem('click', 'color_blue', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_blue');
  setHTMLElemAttribute('src', './assets/images/blue120.png', 'color_current', false);
  set_link();
});
eventHTMLElem('click', 'color_red', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_red');
  setHTMLElemAttribute('src', './assets/images/red120.png', 'color_current', false);
  set_link();
});

if (typeof getUrlData('PARAMS', false) == 'object' && getUrlData('PARAMS', false).hasOwnProperty('id')) {
  if (dictGet(getUrlData('PARAMS', false), 'id') == 'u1') {
    load_umbrella();
  }
  if (dictGet(getUrlData('PARAMS', false), 'id') == 'g1') {
    load_diamond();
  }
  if (dictGet(getUrlData('PARAMS', false), 'id') == 'g2') {
    load_diamondplus();
  }
  if (dictGet(getUrlData('PARAMS', false), 'id') == 'g3') {
    load_gamma();
  }
  if (typeof getUrlData('PARAMS', false) == 'object' ? !Object.keys(getUrlData('PARAMS', false)).length : true) {
    load_umbrella();
  }
  if (dictGet(getUrlData('PARAMS', false), 'id') == '') {
    load_umbrella();
  }
} else {
  load_umbrella();
}

eventHTMLElem('click', 'light_on', false, function(event) {
  if (light == 0) {
    assignMat('cool_light1', 'cooler_light');
    registerSetTimeout(0.1, function() {
      assignMat('cool_light2', 'cooler_light');
      registerSetTimeout(0.1, function() {
        assignMat(['GROUP', 'side-lights'], 'cooler_light');
        registerSetTimeout(0.1, function() {
          assignMat('front-light', 'front_light');
          registerSetTimeout(0.1, function() {
            light = 1;
            changeVis('Point', false);
            changeVis('Area', false);
            changeVis(['GROUP', 'inner-light'], true);
          });
        });
      });
    });
  } else {
    assignMat('cool_light1', 'cooler_light_off');
    registerSetTimeout(0.1, function() {
      assignMat('cool_light2', 'cooler_light_off');
      registerSetTimeout(0.1, function() {
        assignMat(['GROUP', 'side-lights'], 'cooler_light_off');
        registerSetTimeout(0.1, function() {
          assignMat('front-light', 'front_light_off');
          registerSetTimeout(0.1, function() {
            light = 0;
            changeVis('Point', true);
            changeVis('Area', true);
            changeVis(['GROUP', 'inner-light'], false);
          });
        });
      });
    });
  }
});

eventHTMLElem('click', 'color_blue_clear', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_blue_clear');
  setHTMLElemAttribute('src', './assets/images/t_blue120.png', 'color_current', false);
  set_tiar_link();
});
eventHTMLElem('click', 'color_white_clear', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_white_clear');
  setHTMLElemAttribute('src', './assets/images/t_white120.png', 'color_current', false);
  set_tiar_link();
});
eventHTMLElem('click', 'color_green_clear', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_green_clear');
  setHTMLElemAttribute('src', './assets/images/t_green120.png', 'color_current', false);
  set_tiar_link();
});
eventHTMLElem('click', 'color_red_clear', false, function(event) {
  assignMat(['GROUP', 'colors-panels'], 'plastic_red_clear');
  setHTMLElemAttribute('src', './assets/images/t_red120.png', 'color_current', false);
  set_tiar_link();
});

eventHTMLElem('click', 'rotate_on', false, function(event) {
  if (rotation == true) {
    autoRotateCamera(false, 2);
    rotation = false;
  } else {
    autoRotateCamera(true, 2);
    rotation = true;
  }
});

eventHTMLElem('click', 'SideColor', false, function(event) {
  registerSetTimeout(0.05, function() {
    assignMat(['GROUP', 'colors-panels'], 'plastic_red');
    setMaterialColor('plastic_red', 'Principled BSDF Color', 0, 0, 0, getHTMLElemAttribute('value', 'SideColor', false));
  });
});
eventHTMLElem('click', 'CoolerColor', false, function(event) {
  registerSetTimeout(0.05, function() {
    setMaterialColor('cooler_light_off', 'Principled BSDF Color', 0, 0, 0, getHTMLElemAttribute('value', 'CoolerColor', false));
    setMaterialColor('cooler_light', 'RGB', 0, 0, 0, getHTMLElemAttribute('value', 'CoolerColor', false));
  });
});
eventHTMLElem('click', 'ImpellerColor', false, function(event) {
  registerSetTimeout(0.05, function() {
    assignMat('prop_top', 'impeller_light_off');
    assignMat('prop_bottom', 'impeller_light_off');
    setMaterialColor('impeller_light_off', 'Principled BSDF Color', 0, 0, 0, getHTMLElemAttribute('value', 'ImpellerColor', false));
    setMaterialColor('impeller_light', 'RGB', 0, 0, 0, getHTMLElemAttribute('value', 'ImpellerColor', false));
  });
});
eventHTMLElem('click', 'FrontColor', false, function(event) {
  registerSetTimeout(0.05, function() {
    setMaterialColor('front_light_off', 'Principled BSDF Color', 0, 0, 0, getHTMLElemAttribute('value', 'FrontColor', false));
    setMaterialColor('front_light', 'RGB', 0, 0, 0, getHTMLElemAttribute('value', 'FrontColor', false));
  });
});

current_style = 'style_umbrella';
front_visible = true;

eventHTMLElem('click', 'LightColor', false, function(event) {
  registerSetTimeout(0.05, function() {
    setLightParam('COLOR_CSS_HEX', ['GROUP', 'inner-light'], getHTMLElemAttribute('value', 'LightColor', false));
  });
});

eventHTMLElem('click', 'hide_coolers', false, function(event) {
  if (isObjectVisible(['GROUP', 'coolers'])) {
    registerSetTimeout(0.05, function() {
      changeVis(['GROUP', 'coolers'], false);
    });
  } else {
    registerSetTimeout(0.05, function() {
      changeVis(['GROUP', 'coolers'], true);
    });
  }
});
eventHTMLElem('click', 'hide_front', false, function(event) {
  if (front_visible) {
    registerSetTimeout(0.05, function() {
      hide_all();
      front_visible = false;
    });
  } else {
    registerSetTimeout(0.05, function() {
      process_style();
      front_visible = true;
    });
  }
});

eventHTMLElem('click', 'style_transf', false, function(event) {
  current_style = 'style_transf';
  process_style();
});
eventHTMLElem('click', 'style_ufo', false, function(event) {
  current_style = 'style_ufo';
  process_style();
});
eventHTMLElem('click', 'style_predator', false, function(event) {
  current_style = 'style_predator';
  process_style();
});
eventHTMLElem('click', 'style_umbrella', false, function(event) {
  current_style = 'style_umbrella';
  process_style();
});
eventHTMLElem('click', 'style_controller', false, function(event) {
  current_style = 'style_controller';
  process_style();
});

eventHTMLElem('click', 'style_transf', false, function(event) {
  current_style = 'style_transf';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_ufo', false, function(event) {
  current_style = 'style_ufo';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_predator', false, function(event) {
  current_style = 'style_predator';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_umbrella', false, function(event) {
  current_style = 'style_umbrella';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_bio', false, function(event) {
  current_style = 'style_bio';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_rose', false, function(event) {
  current_style = 'style_rose';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_controller', false, function(event) {
  current_style = 'style_controller';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_my2', false, function(event) {
  current_style = 'style_my2';
  hide_all();
  process_style();
});
eventHTMLElem('click', 'style_radio', false, function(event) {
  current_style = 'style_radio';
  hide_all();
  process_style();
});

eventHTMLElem('click', 'cooler_color_red', false, function(event) {
  assignMat('prop_top', 'plastic_red_clear');
  assignMat('prop_bottom', 'plastic_red_clear');
  setHTMLElemAttribute('src', './assets/images/cooler_red_front120.png', 'cooler_color_current', false);
});
eventHTMLElem('click', 'cooler_color_green', false, function(event) {
  assignMat('prop_top', 'plastic_green_clear');
  assignMat('prop_bottom', 'plastic_green_clear');
  setHTMLElemAttribute('src', './assets/images/cooler_green_front120.png', 'cooler_color_current', false);
});
eventHTMLElem('click', 'cooler_color_blue', false, function(event) {
  assignMat('prop_top', 'plastic_blue_clear');
  assignMat('prop_bottom', 'plastic_blue_clear');
  setHTMLElemAttribute('src', './assets/images/cooler_blue_front120.png', 'cooler_color_current', false);
});
eventHTMLElem('click', 'cooler_color_white', false, function(event) {
  assignMat('prop_top', 'plastic_white_clear');
  assignMat('prop_bottom', 'plastic_white_clear');
  setHTMLElemAttribute('src', './assets/images/cooler_white_front120.png', 'cooler_color_current', false);
});

case_current = 'case_umbrella';

paneldesign = 'panel_style_simple';

eventHTMLElem('click', 'case_umbrella', false, function(event) {
  if (!isSceneLoaded('u1.gltf')) {
    startPreloader();
    hidecontrols();
    registerSetTimeout(0.3, function() {
      loadScene('u1.gltf', 'u1.gltf', function() {
        endPreloader();
        load_umbrella();
        showcontrols();
        var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

        Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

      }, function() {
        updatePreloader(Math.round(_pGlob.percentage));
      }, function() {});
    });
  } else {
    load_umbrella();
    process_style();
    showcontrols();
    var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

    Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

  }
});
eventHTMLElem('click', 'case_gamma', false, function(event) {
  if (!isSceneLoaded('g1.gltf')) {
    startPreloader();
    registerSetTimeout(0.3, function() {
      loadScene('g1.gltf', 'g1.gltf', function() {
        endPreloader();
        load_gamma();
        showcontrols();
        var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

        Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

      }, function() {
        updatePreloader(Math.round(_pGlob.percentage));
      }, function() {});
    });
  } else {
    load_gamma();
    var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

    Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

  }
});
eventHTMLElem('click', 'case_diamond', false, function(event) {
  if (!isSceneLoaded('g1.gltf')) {
    startPreloader();
    registerSetTimeout(0.3, function() {
      loadScene('g1.gltf', 'g1.gltf', function() {
        endPreloader();
        load_diamond();
        showcontrols();
        var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

        Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

      }, function() {
        updatePreloader(Math.round(_pGlob.percentage));
      }, function() {});
    });
  } else {
    load_diamond();
    var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

    Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

  }
});
eventHTMLElem('click', 'case_diamondplus', false, function(event) {
  if (!isSceneLoaded('g1.gltf')) {
    startPreloader();
    registerSetTimeout(0.3, function() {
      loadScene('g1.gltf', 'g1.gltf', function() {
        endPreloader();
        load_diamondplus();
        showcontrols();
        var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

        Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

      }, function() {
        updatePreloader(Math.round(_pGlob.percentage));
      }, function() {});
    });
  } else {
    load_diamondplus();
    var VARS = Object.defineProperties({}, {
    "rotation": { get: function() { return rotation; }, set: function(val) { rotation = val; } },
    "light": { get: function() { return light; }, set: function(val) { light = val; } },
    "case_current": { get: function() { return case_current; }, set: function(val) { case_current = val; } },
    "current_style": { get: function() { return current_style; }, set: function(val) { current_style = val; } },
    "front_visible": { get: function() { return front_visible; }, set: function(val) { front_visible = val; } },
    "paneldesign": { get: function() { return paneldesign; }, set: function(val) { paneldesign = val; } },
    "percentage": { get: function() { return percentage; }, set: function(val) { percentage = val; } },
});

    Function('app', 'v3d', 'VARS', 'PROC', 'SceneLoaded();')(appInstance, v3d, VARS, PROC);

  }
});

eventHTMLElem('click', 'panel_style_simple', false, function(event) {
  hidesidepanels();
  paneldesign = 'panel_style_simple';
  setHTMLElemAttribute('src', './assets/images/t_white120.png', 'panel_style_current', false);
  changeVis('clear_panel', true);
  changeVis('front_panel', true);
  setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pziKLcR', 'id_link', false);
});
eventHTMLElem('click', 'panel_style_one', false, function(event) {
  hidesidepanels();
  paneldesign = 'panel_style_one';
  setHTMLElemAttribute('src', './assets/images/style_my.png', 'panel_style_current', false);
  changeVis('style_one', true);
  changeVis('front_panel', true);
  setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pzUAunh', 'id_link', false);
});
eventHTMLElem('click', 'panel_style_transf', false, function(event) {
  hidesidepanels();
  paneldesign = 'panel_style_transf';
  setHTMLElemAttribute('src', './assets/images/style_transf.png', 'panel_style_current', false);
  changeVis('style_transf', true);
  changeVis('front_panel', true);
  setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pzUAunh', 'id_link', false);
});
eventHTMLElem('click', 'panel_style_predator', false, function(event) {
  hidesidepanels();
  paneldesign = 'panel_style_predator';
  setHTMLElemAttribute('src', './assets/images/style_predator.png', 'panel_style_current', false);
  changeVis('style_predator', true);
  changeVis('front_panel', true);
  setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pzUAunh', 'id_link', false);
});
eventHTMLElem('click', 'panel_style_two', false, function(event) {
  hidesidepanels();
  paneldesign = 'panel_style_two';
  setHTMLElemAttribute('src', './assets/images/style_two.png', 'panel_style_current', false);
  changeVis('style_two', true);
  changeVis('front_panel', true);
  setHTMLElemAttribute('href', 'https://s.click.aliexpress.com/e/_pzUAunh', 'id_link', false);
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
